name: CI Build

on:
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  lint:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        submodules: 'recursive'
        lfs: true
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run markdown linting
      run: npm test

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            build_type: Debug

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        submodules: 'recursive'
        lfs: true

    - name: Set build environment variables
      id: set_vars
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "cmake_preset=vs2022" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build/vs2022" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.build_type }}" == "Release" ]; then
          echo "cmake_preset=release" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build/release" >> $GITHUB_OUTPUT
        else
          echo "cmake_preset=default" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Cache Build Directory
      uses: actions/cache@v4
      id: cache-build
      with:
        path: ${{ steps.set_vars.outputs.build_dir }}
        key: ${{ runner.os }}-${{ matrix.build_type }}-build-${{ hashFiles('src/**', 'CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.build_type }}-build-

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxinerama-dev \
          libxrandr-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libgl1-mesa-dev \
          libxext-dev \
          libcurl4-openssl-dev \
          libwebkit2gtk-4.1-dev \
          pkg-config \
          build-essential

    - name: Cache JUCE
      uses: actions/cache@v4
      id: cache-juce
      with:
        path: ${{ github.workspace }}/.juce_cache
        key: ${{ runner.os }}-juce-${{ hashFiles('**/CMakeLists.txt', '**/cmake/**') }}
        restore-keys: |
          ${{ runner.os }}-juce-

    - name: Configure CMake with Retries
      shell: bash
      run: |
        for i in {1..3}; do
          if cmake --preset=${{ steps.set_vars.outputs.cmake_preset }} -DFETCHCONTENT_BASE_DIR=${{ github.workspace }}/.juce_cache; then
            echo "CMake configuration successful on attempt $i."
            break
          fi
          if [ $i -lt 3 ]; then
            echo "CMake configuration failed on attempt $i. Retrying in 5 seconds..."
            sleep 5
          else
            echo "CMake configuration failed after 3 attempts."
            exit 1
          fi
        done

    - name: Build
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          # For Windows, use the preset-defined build directory directly
          cmake --build build/vs2022 --config ${{matrix.build_type}}
        else
          cmake --build ${{ steps.set_vars.outputs.build_dir }} --config ${{matrix.build_type}}
        fi
      shell: bash

    - name: Test (Linux/macOS)
      if: runner.os != 'Windows'
      working-directory: ${{ steps.set_vars.outputs.build_dir }}
      run: |
        # Determine binary path based on platform
        if [ "$RUNNER_OS" == "macOS" ]; then
          BINARY_PATH="DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin.app"
          BINARY_TYPE="macOS app bundle"
          TEST_CMD="[ -d"
        else
          BINARY_PATH="DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin"
          BINARY_TYPE="Linux binary"
          TEST_CMD="[ -f"
        fi
        
        # Check if binary exists
        if eval "$TEST_CMD \"$BINARY_PATH\" ]"; then
          echo "Build successful - $BINARY_TYPE created"
        else
          echo "Build failed - $BINARY_TYPE not found"
          ls -la "DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/"
          exit 1
        fi

    - name: Test (Windows)
      if: runner.os == 'Windows'
      working-directory: build/vs2022
      shell: pwsh
      run: |
        # For now, just verify the binary was created
        if (Test-Path "DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin.exe") {
          Write-Host "Build successful - binary created"
        } else {
          Write-Host "Build failed - binary not found"
          Get-ChildItem "DSPJucePlugin_artefacts/${{matrix.build_type}}/"
          exit 1
        }

    - name: List Windows build artifacts
      if: runner.os == 'Windows' && matrix.build_type == 'Release'
      run: |
        ls -la build/vs2022/DSPJucePlugin_artefacts/Release/
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.build_type == 'Release'
      with:
        name: DSPJucePlugin-${{ matrix.os }}
        path: ${{ steps.set_vars.outputs.build_dir }}/DSPJucePlugin_artefacts/Release/
        retention-days: 30