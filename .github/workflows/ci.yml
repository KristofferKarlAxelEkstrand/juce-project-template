name: CI Build

on:
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  lint:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        submodules: 'recursive'
        lfs: true
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run markdown linting
      run: npm test

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            build_type: Debug

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        submodules: 'recursive'
        lfs: true

    - name: Set build environment variables
      id: set_vars
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "cmake_preset=vs2022" >> $GITHUB_OUTPUT
          echo "cmake_build_preset=vs2022-$(echo ${{ matrix.build_type }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build/vs2022" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.build_type }}" == "Release" ]; then
          echo "cmake_preset=release" >> $GITHUB_OUTPUT
          echo "cmake_build_preset=release" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build/release" >> $GITHUB_OUTPUT
        else
          echo "cmake_preset=default" >> $GITHUB_OUTPUT
          echo "cmake_build_preset=default" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxinerama-dev \
          libxrandr-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libgl1-mesa-dev \
          libxext-dev \
          libcurl4-openssl-dev \
          libwebkit2gtk-4.1-dev \
          pkg-config \
          build-essential

    - name: Cache JUCE
      uses: actions/cache@v4
      id: cache-juce
      with:
        path: ${{ github.workspace }}/.juce_cache
        key: ${{ runner.os }}-juce-${{ hashFiles('**/CMakeLists.txt', '**/cmake/**') }}
        restore-keys: |
          ${{ runner.os }}-juce-

    - name: Configure CMake with Retries
      shell: bash
      run: |
        echo "=== Listing available CMake presets ==="
        cmake --list-presets || echo "cmake --list-presets failed"
        echo
        echo "=== Dump CMakePresets.json (if present) ==="
        if [ -f CMakePresets.json ]; then
          sed -n '1,200p' CMakePresets.json || cat CMakePresets.json
        else
          echo "No CMakePresets.json in repo root"
        fi
        echo
        FETCHCACHE="${GITHUB_WORKSPACE}/.juce_cache"
        echo "Using FETCHCONTENT_BASE_DIR=${FETCHCACHE}"
        for i in 1 2 3; do
          echo "--- cmake attempt $i ---"
          if cmake --preset=${{ steps.set_vars.outputs.cmake_preset }} -DFETCHCONTENT_BASE_DIR="${FETCHCACHE}" --log-level=DEBUG; then
            echo "CMake configuration successful on attempt $i."
            break
          fi
          echo "CMake configuration failed on attempt $i."
          # show any generated debug logs immediately
          BUILD_DIR="${{ steps.set_vars.outputs.build_dir }}"
          if [ -d "${BUILD_DIR}/CMakeFiles" ]; then
            echo "---- CMakeError.log ----"
            sed -n '1,200p' "${BUILD_DIR}/CMakeFiles/CMakeError.log" 2>/dev/null || true
            echo "---- CMakeOutput.log ----"
            sed -n '1,200p' "${BUILD_DIR}/CMakeFiles/CMakeOutput.log" 2>/dev/null || true
          else
            echo "Build dir ${BUILD_DIR} not present yet."
          fi
          if [ $i -lt 3 ]; then
            echo "Retrying in 5s..."
            sleep 5
          else
            echo "CMake configuration failed after 3 attempts."
            echo "::error::CMake configuration failed. See logs above."
            exit 1
          fi
        done

    - name: Show CMake error logs
      if: always()
      shell: bash
      run: |
        BUILD_DIR="${{ steps.set_vars.outputs.build_dir }}"
        echo "Build dir resolved to: ${BUILD_DIR}"
        if [ -d "${BUILD_DIR}/CMakeFiles" ]; then
          echo "=== CMake Error Log ==="
          sed -n '1,400p' "${BUILD_DIR}/CMakeFiles/CMakeError.log" 2>/dev/null || echo "No CMakeError.log found"
          echo
          echo "=== CMake Output Log ==="
          sed -n '1,400p' "${BUILD_DIR}/CMakeFiles/CMakeOutput.log" 2>/dev/null || echo "No CMakeOutput.log found"
        else
          echo "No CMakeFiles directory at ${BUILD_DIR}/CMakeFiles (CMake likely failed before creating build dir)."
        fi

    - name: Build
      run: cmake --build --preset=${{ steps.set_vars.outputs.cmake_build_preset }}
      shell: bash

    - name: Validate build artifacts
      shell: bash
      run: |
        BUILD_DIR="${{ steps.set_vars.outputs.build_dir }}"
        echo "Validating build dir: ${BUILD_DIR}"
        # On Windows with bash, ensure path is accessible
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Convert to native path if cygpath is available
          if command -v cygpath >/dev/null 2>&1; then
            WIN_BUILD_DIR="$(cygpath -w "${BUILD_DIR}")"
            echo "Converted build dir to Windows form: ${WIN_BUILD_DIR}"
          fi
        fi
        bash scripts/validate-builds.sh ${{ matrix.build_type }} "${BUILD_DIR}"

    - name: Extract plugin metadata
      id: plugin_meta
      shell: bash
      run: |
        source ${{ steps.set_vars.outputs.build_dir }}/plugin_metadata.sh
        echo "target_name=$PROJECT_NAME_TARGET" >> $GITHUB_OUTPUT

    - name: Upload build artefacts
      uses: actions/upload-artifact@v4
      if: matrix.build_type == 'Release'
      with:
        name: ${{ steps.plugin_meta.outputs.target_name }}-${{ matrix.os }}
        path: ${{ steps.set_vars.outputs.build_dir }}/${{ steps.plugin_meta.outputs.target_name }}_artefacts/Release/
        retention-days: 30