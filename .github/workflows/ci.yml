name: CI Build

on:
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  lint:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        submodules: 'recursive'
        lfs: true
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run markdown linting
      run: npm test

  build:
    name: Build (${{ matrix.os }}, ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu Debug - runs on ALL PRs (develop and main)
          - os: ubuntu-latest
            build_type: Debug
            run_on_develop: true
          # Windows Release - runs on ALL PRs (develop and main)
          - os: windows-latest
            build_type: Release
            run_on_develop: true
          # Ubuntu Release - runs ONLY on PRs to main
          - os: ubuntu-latest
            build_type: Release
            run_on_develop: false
          # macOS Release - runs ONLY on PRs to main
          - os: macos-latest
            build_type: Release
            run_on_develop: false

    steps:
    # Skip this job if it's a PR to develop and the job is marked as main-only
    - name: Check if job should run
      id: should_run
      run: |
        if [ -n "${{ github.base_ref }}" ] && [ "${{ github.base_ref }}" == "develop" ] && [ "${{ matrix.run_on_develop }}" == "false" ]; then
          echo "Skipping job: PR to develop, job marked for main only"
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "Running job"
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - uses: actions/checkout@v5
      if: steps.should_run.outputs.skip != 'true'
      with:
        fetch-depth: 0
        submodules: 'recursive'
        lfs: true

    - name: Verify JUCE submodule
      if: steps.should_run.outputs.skip != 'true'
      shell: bash
      run: |
        echo "=== Checking JUCE submodule status ==="
        git submodule status
        echo
        if [ -f "third_party/JUCE/CMakeLists.txt" ]; then
          echo "✅ JUCE submodule is present at third_party/JUCE"
          JUCE_VERSION=$(grep 'project.*VERSION' third_party/JUCE/CMakeLists.txt | head -1 || echo "Version not found")
          echo "JUCE Version info: $JUCE_VERSION"
        else
          echo "⚠️ JUCE submodule not found at third_party/JUCE"
          echo "CMake will use FetchContent to download JUCE 8.0.10"
        fi

    - name: Ensure JUCE submodule is initialized
      if: steps.should_run.outputs.skip != 'true'
      shell: bash
      run: |
        if [ ! -d "third_party/JUCE" ] || [ -z "$(git -C third_party/JUCE rev-parse --show-toplevel 2>/dev/null)" ]; then
          echo "Initializing submodules..."
          git submodule update --init --recursive
        else
          echo "✅ JUCE submodule already present"
        fi

    - name: Set build environment variables
      if: steps.should_run.outputs.skip != 'true'
      id: set_vars
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "cmake_preset=vs2022" >> $GITHUB_OUTPUT
          echo "cmake_build_preset=vs2022-$(echo ${{ matrix.build_type }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build/vs2022" >> $GITHUB_OUTPUT
        elif [ "${{ matrix.build_type }}" == "Release" ]; then
          echo "cmake_preset=release" >> $GITHUB_OUTPUT
          echo "cmake_build_preset=release" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build/release" >> $GITHUB_OUTPUT
        else
          echo "cmake_preset=default" >> $GITHUB_OUTPUT
          echo "cmake_build_preset=default" >> $GITHUB_OUTPUT
          echo "build_dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Install Linux dependencies
      if: steps.should_run.outputs.skip != 'true' && runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxinerama-dev \
          libxrandr-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libgl1-mesa-dev \
          libxext-dev \
          libcurl4-openssl-dev \
          libwebkit2gtk-4.1-dev \
          pkg-config \
          build-essential

    - name: Cache JUCE
      if: steps.should_run.outputs.skip != 'true'
      uses: actions/cache@v4
      id: cache-juce
      with:
        path: ${{ github.workspace }}/.juce_cache
        key: ${{ runner.os }}-juce-${{ hashFiles('**/CMakeLists.txt', '**/cmake/**', 'third_party/JUCE/**') }}
        restore-keys: |
          ${{ runner.os }}-juce-
      continue-on-error: true

    - name: Report cache status
      if: steps.should_run.outputs.skip != 'true'
      shell: bash
      run: |
        if [ "${{ steps.cache-juce.outputs.cache-hit }}" = "true" ]; then
          echo "✅ JUCE cache hit - using cached dependencies"
        else
          echo "⚠️ JUCE cache miss - will download dependencies"
        fi

    - name: Configure CMake with Retries
      if: steps.should_run.outputs.skip != 'true'
      shell: bash
      run: |
        echo "=== cmake version ==="
        cmake --version || true
        if [ "$(uname)" = "Darwin" ]; then
          echo "=== xcodebuild version ==="
          xcodebuild -version || true
        fi
        echo
        echo "=== Listing available CMake presets ==="
        cmake --list-presets || echo "cmake --list-presets failed"
        echo
        echo "=== Dump CMakePresets.json (if present) ==="
        if [ -f CMakePresets.json ]; then
          sed -n '1,200p' CMakePresets.json || cat CMakePresets.json
        else
          echo "No CMakePresets.json in repo root"
        fi
        echo
        FETCHCACHE="${GITHUB_WORKSPACE}/.juce_cache"
        BUILD_DIR="${{ steps.set_vars.outputs.build_dir }}"
        PRESET="${{ steps.set_vars.outputs.cmake_preset }}"
        echo "Using FETCHCONTENT_BASE_DIR=${FETCHCACHE}"
        echo "Build directory: ${BUILD_DIR}"
        echo "Preset: ${PRESET}"
        echo
        
        for i in 1 2 3; do
          echo "--- cmake attempt $i ---"
          if [ "${{ runner.os }}" = "macOS" ]; then
            # Use Xcode generator for macOS to ensure proper AU building
            echo "Using Xcode generator for macOS"
            if cmake -S . -B "${BUILD_DIR}" -G "Xcode" -DCMAKE_BUILD_TYPE=Release -DFETCHCONTENT_BASE_DIR="${FETCHCACHE}" --log-level=DEBUG; then
              echo "CMake configuration successful on attempt $i."
              break
            fi
          else
            # Use preset for Windows/Linux
            echo "Using preset: ${PRESET}"
            if cmake --preset="${PRESET}" -DFETCHCONTENT_BASE_DIR="${FETCHCACHE}" --log-level=DEBUG; then
              echo "CMake configuration successful on attempt $i."
              break
            fi
          fi
          
          echo "CMake configuration failed on attempt $i."
          # show any generated debug logs immediately
          if [ -d "${BUILD_DIR}/CMakeFiles" ]; then
            echo "---- CMakeError.log ----"
            sed -n '1,200p' "${BUILD_DIR}/CMakeFiles/CMakeError.log" 2>/dev/null || true
            echo "---- CMakeOutput.log ----"
            sed -n '1,200p' "${BUILD_DIR}/CMakeFiles/CMakeOutput.log" 2>/dev/null || true
          else
            echo "Build dir ${BUILD_DIR} not present yet."
          fi
          if [ $i -lt 3 ]; then
            echo "Retrying in 10s..."
            sleep 10
          else
            echo "CMake configuration failed after 3 attempts."
            echo "::error::CMake configuration failed. See logs above."
            exit 1
          fi
        done

    - name: Show CMake error logs
      if: steps.should_run.outputs.skip != 'true' && always()
      shell: bash
      run: |
        BUILD_DIR="${{ steps.set_vars.outputs.build_dir }}"
        echo "Build dir resolved to: ${BUILD_DIR}"
        if [ -d "${BUILD_DIR}/CMakeFiles" ]; then
          echo "=== CMake Error Log ==="
          sed -n '1,400p' "${BUILD_DIR}/CMakeFiles/CMakeError.log" 2>/dev/null || echo "No CMakeError.log found"
          echo
          echo "=== CMake Output Log ==="
          sed -n '1,400p' "${BUILD_DIR}/CMakeFiles/CMakeOutput.log" 2>/dev/null || echo "No CMakeOutput.log found"
        else
          echo "No CMakeFiles directory at ${BUILD_DIR}/CMakeFiles (CMake likely failed before creating build dir)."
        fi

    - name: Upload CMake logs on failure
      if: steps.should_run.outputs.skip != 'true' && failure()
      uses: actions/upload-artifact@v4
      with:
        name: cmake-logs-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          ${{ steps.set_vars.outputs.build_dir }}/CMakeFiles/CMakeError.log
          ${{ steps.set_vars.outputs.build_dir }}/CMakeFiles/CMakeOutput.log
        if-no-files-found: ignore
        retention-days: 7

    - name: Build
      if: steps.should_run.outputs.skip != 'true'
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
          # Xcode generator requires --config flag
          echo "Building with Xcode for macOS"
          cmake --build "${{ steps.set_vars.outputs.build_dir }}" --config ${{ matrix.build_type }}
        else
          # Preset-based build for Windows/Linux
          echo "Building with preset: ${{ steps.set_vars.outputs.cmake_build_preset }}"
          cmake --build --preset=${{ steps.set_vars.outputs.cmake_build_preset }}
        fi

    - name: List Xcode targets (macOS debug)
      if: steps.should_run.outputs.skip != 'true' && runner.os == 'macOS'
      shell: bash
      run: |
        BUILD_DIR="${{ steps.set_vars.outputs.build_dir }}"
        echo "=== Listing Xcode project targets ==="
        # Find the .xcodeproj file
        XCODEPROJ=$(find "${BUILD_DIR}" -maxdepth 1 -name "*.xcodeproj" | head -1)
        if [ -n "${XCODEPROJ}" ]; then
          echo "Found Xcode project: ${XCODEPROJ}"
          xcodebuild -project "${XCODEPROJ}" -list || true
        else
          echo "No .xcodeproj found in ${BUILD_DIR}"
        fi

    - name: Show produced plugin artifacts (macOS debug)
      if: steps.should_run.outputs.skip != 'true' && runner.os == 'macOS'
      shell: bash
      run: |
        BUILD_DIR="${{ steps.set_vars.outputs.build_dir }}"
        echo "=== Searching for plugin artifacts ==="
        echo "Looking for .component, .vst3, .app files:"
        find "${BUILD_DIR}" -type d \( -name "*.component" -o -name "*.vst3" -o -name "*.app" \) -print || true
        echo
        echo "=== Build directory structure ==="
        ls -la "${BUILD_DIR}" || true
        echo
        # Dynamically discover artefacts directory
        artefacts_dir=$(find "${BUILD_DIR}" -maxdepth 1 -type d -name "*_artefacts" | head -1)
        if [ -n "${artefacts_dir}" ] && [ -d "${artefacts_dir}" ]; then
          echo "=== Artefacts directory contents (${artefacts_dir}) ==="
          find "${artefacts_dir}" -maxdepth 3 -type d -print || true
        fi

    - name: Validate build artifacts
      if: steps.should_run.outputs.skip != 'true'
      shell: bash
      run: |
        BUILD_DIR="${{ steps.set_vars.outputs.build_dir }}"
        echo "Validating build dir: ${BUILD_DIR}"
        # On Windows with bash, ensure path is accessible
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Convert to native path if cygpath is available
          if command -v cygpath >/dev/null 2>&1; then
            WIN_BUILD_DIR="$(cygpath -w "${BUILD_DIR}")"
            echo "Converted build dir to Windows form: ${WIN_BUILD_DIR}"
          fi
        fi
        bash scripts/validate-builds.sh ${{ matrix.build_type }} "${BUILD_DIR}"

    - name: Extract plugin metadata
      if: steps.should_run.outputs.skip != 'true'
      id: plugin_meta
      shell: bash
      run: |
        METADATA_FILE="${{ steps.set_vars.outputs.build_dir }}/plugin_metadata.sh"
        if [ -f "${METADATA_FILE}" ]; then
          source "${METADATA_FILE}"
          echo "target_name=$PROJECT_NAME_TARGET" >> $GITHUB_OUTPUT
          echo "✅ Plugin metadata: $PROJECT_NAME_PRODUCT v$PROJECT_VERSION"
        else
          echo "::error::plugin_metadata.sh not found in build dir (${{ steps.set_vars.outputs.build_dir }})"
          echo "Build directory contents:"
          ls -la "${{ steps.set_vars.outputs.build_dir }}" || true
          exit 1
        fi

    - name: Upload build artefacts
      if: steps.should_run.outputs.skip != 'true' && matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.plugin_meta.outputs.target_name }}-${{ matrix.os }}
        path: ${{ steps.set_vars.outputs.build_dir }}/${{ steps.plugin_meta.outputs.target_name }}_artefacts/Release/
        retention-days: 30