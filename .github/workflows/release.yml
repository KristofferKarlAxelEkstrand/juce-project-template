# .github/workflows/release.yml

name: Create Plugin Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build for ${{ matrix.os_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
            platform_id: linux
            preset: release
            cmake_build_preset: release
            artifact_dir: "build/release/DSPJucePlugin_artefacts/Release"
          - os: windows-latest
            os_name: Windows
            platform_id: windows
            preset: vs2022
            cmake_build_preset: vs2022-release
            artifact_dir: "build/vs2022/DSPJucePlugin_artefacts/Release"
          - os: macos-latest
            os_name: macOS
            platform_id: macos
            preset: release
            cmake_build_preset: release
            artifact_dir: "build/release/DSPJucePlugin_artefacts/Release"

    env:
      ZIP_NAME: "DSP-JUCE-Plugin-${{ github.ref_name }}-${{ matrix.platform_id }}.zip"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libx11-dev libxcomposite-dev libxcursor-dev libxinerama-dev libxrandr-dev libfreetype6-dev libfontconfig1-dev libgl1-mesa-dev libwebkit2gtk-4.1-dev

      - name: Configure CMake
        run: cmake --preset=${{ matrix.preset }}

      - name: Build with CMake
        run: cmake --build --preset=${{ matrix.cmake_build_preset }}

      - name: Archive plugin artifacts
        shell: bash
        run: |
          cd "${{ matrix.artifact_dir }}"
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            zip -r "${{ github.workspace }}/${{ env.ZIP_NAME }}" VST3 Standalone AU
          else
            zip -r "${{ github.workspace }}/${{ env.ZIP_NAME }}" VST3 Standalone
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}

  create_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*.zip
          body: "Automated release for version ${{ github.ref_name }}."
          fail_on_unmatched_files: true
